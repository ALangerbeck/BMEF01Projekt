#include "arduino_secrets.h"
#include <Wire.h>
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Weatherstation"
  https://create.arduino.cc/cloud/things/aa9b7bf5-1d5a-49e6-b3cf-49497f6e0310 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudTemperature temperature;
  CloudRelativeHumidity humidity;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#include "thingProperties.h"

//IC2 variables
#define BUFFER_SIZE  4
#define MAX_NUMBER_OF_SLAVES 1
#define FIRST_SLAVE_ADDRESS 1
#define READ_CYCLE_DELAY 1800000

byte buffer[BUFFER_SIZE];


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  
  

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  
  Serial.println("MASTER READER");
  Serial.println("*************");
  
  Wire.begin();        // Activate I2C link
}

void loop() {
  Serial.print("New Loop");
  IC2Recive();
  UpdateData();
  // Your code here 
  
  
}

void IC2Recive(){
  Wire.requestFrom(FIRST_SLAVE_ADDRESS, BUFFER_SIZE);    // request data from the slave
    if(Wire.available() == BUFFER_SIZE)
      {  // if the available data size is same as I'm expecting
        // Reads the buffer the slave sent
        for (int i = 0; i < BUFFER_SIZE; i++) 
        {
          buffer[i] = Wire.read();  // gets the data
        }

        // Parse the buffer
        // In order to convert the incoming bytes info short, I use union
        union short_tag {
          byte b[2];
          short val;
        } short_cast;

        // Parse the temperature
        short_cast.b[0] = buffer[0];
        short_cast.b[1] = buffer[1];
        float temperatureIC2 = ((float)(short_cast.val)) / 10;

        // Parse the moisture
        short_cast.b[0] = buffer[2];
        short_cast.b[1] = buffer[3];
        float moistureIC2 =  ((float)(short_cast.val)) / 10; //short_cast.val;

        // Prints the income data
        Serial.print("Slave address ");      
        Serial.print(FIRST_SLAVE_ADDRESS);
        Serial.print(": Temprature = ");
        Serial.print(temperatureIC2);
        Serial.print("; Moisture = ");
        Serial.println(moistureIC2);

        temperature = temperatureIC2;
        humidity = moistureIC2;

        
      }
    
    Serial.println("*************************");
  
    delay(READ_CYCLE_DELAY);
  }


void UpdateData(){
  ArduinoCloud.update();
}
